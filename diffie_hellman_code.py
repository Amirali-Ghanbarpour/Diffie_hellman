def modular_exponentiation(base, exponent, modulus):
    result = 1
    base = base % modulus
    while exponent > 0:
        if exponent % 2 == 1:
            result = (result * base) % modulus
        exponent = exponent // 2
        base = (base * base) % modulus
    return result


def diffie_hellman(g, p, a, b):
    A = modular_exponentiation(g, a, p)
    B = modular_exponentiation(g, b, p)

    s1 = modular_exponentiation(B, a, p)
    s2 = modular_exponentiation(A, b, p)

    if s1 == s2:
        return s1
    else:
        return "Error: Key exchange failed."


g = 2
p = 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919

a = 1101001010019203192312312312435234234131235457686756554434232325365645342323243
b = 2343423432473984729384792837492837498273984739847982

s = diffie_hellman(g, p, a, b)
print("Shared secret key:", s)
